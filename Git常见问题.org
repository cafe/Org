#+TITLE: Git常见问题
#+AUTHOR: HDC

* error: no-fast forward
#+BEGIN_SRC bash
$ git push
To ssh://user@host/home/git/hook
![rejected]    master -> master(non-fast forward)
error.failed to push some refs to 'ssh://user@host/home/git/hook'
#+END_SRC
意思是你的 parent commit 和远端的不相同，也就是线路有分岔，需要先 pull 回来处理好 merge 才能 push 上去。

* git rebase
我们先来看看 git-rebase 的命令格式：
git rebase [-i | --interactive] [options] [--onto <newbase>] <upstream>[<branch>]
git rebase [-i | --interactive] [options] --onto <newbase> --root [<branch>]
git rebase --continue | --skip | --abort
从命令格式，可以看到 git-rebase 命令 *至少* 需要一个参数，那就是 <upstream>，这个参数可以是一个分支名称，也可以是一次有效的commit。
*一个小地方*
在你决定学习这个命令之前，有一个小地方你应该注意，那就是如果git-rebase后面加上了参数 <branch>，那么 git-rebase 会在任何其他动作之前先执行 git checkout <branch>，如果没有加参数 <branch>，那么git-rebase会针对当前分支来做动作。

*命令用处*
git-rebase命令主要用在从上游分支获取最新commit信息，并有机的将当前分支和上游分支进行合并。
这是只言片语的介绍，可能读者并不能了解它的用途和好处。
还是要用例子说话。我们假设主分支为master，在开发过程中生成一个新的分支topic。master称为topic的上游分支。
例子开始：
#+BEGIN_SRC bash
$ cd rebase
$ vi roc.c
$ git init
$ git add .
$ git commit -m "master:001"
$ git log
#+END_SRC
至此，我们已经在master分支完成了一个commit。
#+BEGIN_SRC bash
$ vi roc.c
$ git commit -a -m "master:002"
$ git log
#+END_SRC
至此，我们已经在master分支完成了两次commit的提交。
现在的分支结果是这样的，请记清楚：
master:001 -- master:002 (master)
好，我们继续要做的事情就是建立一个新的分支topic。
#+BEGIN_SRC bash
$ git branch
$ git branch topic
$ git branch
* master
topic
$ git checkout topic
Switched to branch "topic"
$ git branch
master
* topic
#+END_SRC
好了，我们已经成功建立了 topic 分支，并且已经转移到了 topic 分支。
接下来，topic上面的开发情况如下：
#+BEGIN_SRC bash
$ vi roc.c
$ git commit -a -m "topic:001"
$ vi roc.c
$ git commit -a -m "topic:002"
$ git log
#+END_SRC
可知，自从建立并切换到 topic 分支后，topic又进行了两次commit提交，每次分别加入了一行代码。
此时，分支结果应该是这样的：
#+BEGIN_EXAMPLE
                topic:001  --- topic:002    (topic)
			       /
master:001 --- master:002    (master)
#+END_EXAMPLE
这个图已经很清晰了，可以看出分支的走向。
接下来，master分支也有自己的进度，如下：
#+BEGIN_SRC bash
$ git checkout master
Switched to branch "master"
$ git branch
* master
topic
$ vi roc.c
$ git commit -a -m "master:003"
$ vi roc.c
$ git commit -a -m "master:004"
$ git log
#+END_SRC
可以看到，master分支也完成了两次commit提交，每次分别添加了一行代码。
截止此时，分支结构为：
#+BEGIN_EXAMPLE
                topic:001 --- topic:002  (topic)
                   /
master:001 --- master:002 --- master:003 --- master:004  (master)
#+END_EXAMPLE
在这个时候，我们的实验样本已经基本搭建完毕，git-rebase就要派上用场了！
我们假设 topic 和 master 是一个项目的两个分支，master当然是主分支，而topic是旁路分支。在软件开发的大部分情况中，旁路分支是要遵从主分支的。所以说，现在topic分支想将master分支开发的最新代码导入到topic分支中，而且要求动作不影响master主分支的开发，也就是说要暗中完成。git-rebase上场了：
#+BEGIN_SRC bash
$ git checkout topic
Switched to branch "topic"
$ git branch
master
* topic
$ git rebase master
First, rewinding head to replay your work on top of it ...
Applying topic:001
error: patch failed: roc.c:1
error: roc.c: patch does not apply
Using index info reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merged roc.c
Applying topic:002
#+END_SRC
我们使用了 git rebase master 来完成我们的需求。如果你心细的话，你会看到它输出了一些error，意思是说“补丁失败”，这个error没有关系，不影响 git-rebase 的正常工作的。
执行完成的，master分支刚才开发的 master:003 和 master:004 也已经悄悄地进入了topic分支的日志里了。
而在 roc.c 文件中也已经有了相应的开发代码。
这下，你是不是有一种豁然开朗的感觉？看一下分支结构图：
#+BEGIN_EXAMPLE
                                              topic:001 --- topic:002
                                              /   
master:001 --- master:002 --- master:003 --- master:004  (master)
#+END_EXAMPLE
